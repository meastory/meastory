import { useState, useEffect } from 'react'
import { useAuthStore, supabase } from '../stores/authStore'
import { useRoomStore } from '../stores/roomStore'
import type { Tables } from '../types/supabase'

type Room = Tables<'rooms'>
type Story = Tables<'stories'>

export default function RoomManager() {
  const { user } = useAuthStore()
  const { enterRoom } = useRoomStore()
  const [rooms, setRooms] = useState<Room[]>([])
  const [stories, setStories] = useState<Story[]>([])
  const [roomCode, setRoomCode] = useState('')
  const [roomName, setRoomName] = useState('')
  const [selectedStoryId, setSelectedStoryId] = useState<string>('')
  const [loading, setLoading] = useState(false)
  const [message, setMessage] = useState('')
  const [activeTab, setActiveTab] = useState<'create' | 'join'>('create')

  // Load user's rooms and available stories
  useEffect(() => {
    if (user) {
      loadUserRooms()
      loadStories()
    }
  }, [user])

  const loadUserRooms = async () => {
    try {
      // Load rooms where user is host OR participant
      const { data: hostedRooms, error: hostedError } = await supabase
        .from('rooms')
        .select('id, name, code, story_id, host_id, status, created_at, updated_at, max_participants, settings, ended_at')
        .eq('host_id', user!.id)

      if (hostedError) throw hostedError

      // Load rooms where user is a participant
      const { data: participantRooms, error: participantError } = await supabase
        .from('room_participants')
        .select(`
          room_id,
          rooms (
            id,
            name,
            code,
            story_id,
            host_id,
            status,
            created_at,
            updated_at,
            max_participants,
            settings,
            ended_at
          )
        `)
        .eq('user_id', user!.id)

      if (participantError) throw participantError

      // Combine and deduplicate rooms
      const allRooms = [
        ...(hostedRooms || []),
        ...(participantRooms?.map(p => p.rooms).filter(Boolean) || [])
      ]

      // Remove duplicates based on room ID
      const uniqueRooms = allRooms.filter((room, index, self) => 
        index === self.findIndex(r => r.id === room.id)
      )

      setRooms(uniqueRooms)
    } catch (error) {
      console.error('Error loading rooms:', error)
    }
  }

  const loadStories = async () => {
    try {
      const { data, error } = await supabase
        .from('stories')
        .select('*')
        .eq('status', 'published')
        .order('title', { ascending: true })

      if (error) throw error
      setStories(data || [])
    } catch (error) {
      console.error('Error loading stories:', error)
    }
  }

  const createRoom = async () => {
    if (!user || !roomName.trim()) return

    setLoading(true)
    setMessage('')

    try {
      console.log('üèóÔ∏è Creating room with name:', roomName.trim(), 'story_id:', selectedStoryId || 'none')

      // Create room with selected story
      const { data, error } = await supabase
        .from('rooms')
        .insert({
          name: roomName.trim(),
          host_id: user.id,
          story_id: selectedStoryId || null,
          max_participants: 10
        })
        .select('id, name, code, story_id, created_at, status')
        .single()

      if (error) throw error

      console.log('‚úÖ Room created successfully:', data)

      // The code should be generated by the database trigger
      if (data.code) {
        setMessage(`Room created! Code: ${data.code}`)
      } else {
        // If code isn't returned, fetch the room to get the generated code
        const { data: roomData, error: fetchError } = await supabase
          .from('rooms')
          .select('code')
          .eq('id', data.id)
          .single()

        if (!fetchError && roomData?.code) {
          setMessage(`Room created! Code: ${roomData.code}`)
        } else {
          setMessage('Room created successfully! Code will be generated shortly.')
        }
      }

      // Reset form
      setRoomName('')
      setSelectedStoryId('')

      // Reload rooms to show the new room
      loadUserRooms()
    } catch (error: any) {
      console.error('‚ùå Error creating room:', error)
      setMessage(`Error creating room: ${error.message}`)
    } finally {
      setLoading(false)
    }
  }

  const handleJoinRoom = async () => {
    if (!user || !roomCode.trim()) return

    setLoading(true)
    setMessage('')

    try {
      console.log('üîó Joining room with code:', roomCode.trim())

      // First, find the room
      const { data: room, error: roomError } = await supabase
        .from('rooms')
        .select('*')
        .eq('code', roomCode.trim().toUpperCase())
        .single()

      if (roomError) throw roomError

      console.log('üìã Found room:', room.name, 'ID:', room.id)

      // Check if user is already a participant
      const { data: existingParticipant } = await supabase
        .from('room_participants')
        .select('*')
        .eq('room_id', room.id)
        .eq('user_id', user.id)
        .single()

      if (existingParticipant) {
        setMessage('You are already in this room!')
        return
      }

      // Add user as participant
      const { error: joinError } = await supabase
        .from('room_participants')
        .insert({
          room_id: room.id,
          user_id: user.id,
          participant_name: user.display_name || 'Anonymous'
        })

      if (joinError) throw joinError

      setMessage(`Successfully joined room: ${room.name}`)
      setRoomCode('')

      // Reload rooms to show the joined room
      loadUserRooms()
    } catch (error: any) {
      console.error('‚ùå Room join error:', error)
      setMessage(`Error joining room: ${error.message}`)
    } finally {
      setLoading(false)
    }
  }

  const handleEnterRoom = async (room: Room) => {
    console.log('üö™ Entering room:', room.name)
    try {
      await enterRoom(room.id)
    } catch (error: any) {
      console.error('‚ùå Error entering room:', error)
      setMessage(`Error entering room: ${error.message}`)
    }
  }

  const handleDeleteRoom = async (roomId: string, roomName: string) => {
    if (!confirm(`Are you sure you want to delete the room "${roomName}"? This action cannot be undone.`)) {
      return
    }

    setMessage('Deleting room...')

    try {
      const { error } = await supabase
        .from('rooms')
        .delete()
        .eq('id', roomId)

      if (error) throw error

      setMessage('Room deleted successfully')
      loadUserRooms()
    } catch (error: any) {
      console.error('‚ùå Error deleting room:', error)
      setMessage(`Error deleting room: ${error.message}`)
    }
  }

  if (!user) {
    return <div>Please log in to manage rooms</div>
  }

  return (
    <div className="min-h-screen bg-black text-white p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-4 text-center">Room Manager</h1>
        
        {/* Tabs - Fixed styling */}
        <div className="flex mb-6 border-b border-gray-700">
          <button
            onClick={() => setActiveTab('create')}
            className={`px-4 py-2 border-b-2 ${
              activeTab === 'create' 
                ? 'border-blue-500 text-blue-400' 
                : 'border-transparent text-gray-400'
            }`}
          >
            Create Room
          </button>
          <button
            onClick={() => setActiveTab('join')}
            className={`px-4 py-2 border-b-2 ${
              activeTab === 'join' 
                ? 'border-blue-500 text-blue-400' 
                : 'border-transparent text-gray-400'
            }`}
          >
            Join Room
          </button>
        </div>

        {/* Status Message */}
        {message && (
          <div className="mb-6 p-4 bg-blue-900/50 border border-blue-500 rounded-lg text-center">
            {message}
          </div>
        )}

        {/* Tab Content */}
        {activeTab === 'create' && (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Room Name</label>
              <input
                type="text"
                value={roomName}
                onChange={(e) => setRoomName(e.target.value)}
                placeholder="Enter room name"
                className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Select Story (Optional)</label>
              <select
                value={selectedStoryId}
                onChange={(e) => setSelectedStoryId(e.target.value)}
                className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-white/50"
              >
                <option value="">No story selected</option>
                {stories.map((story) => (
                  <option key={story.id} value={story.id}>
                    {story.title}
                  </option>
                ))}
              </select>
            </div>

            <button
              onClick={createRoom}
              disabled={loading || !roomName.trim()}
              className="w-full px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white rounded-lg font-medium transition-colors"
            >
              {loading ? 'Creating...' : 'Create Room'}
            </button>
          </div>
        )}

        {activeTab === 'join' && (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Room Code</label>
              <input
                type="text"
                value={roomCode}
                onChange={(e) => setRoomCode(e.target.value.toUpperCase())}
                placeholder="Enter 6-character room code"
                maxLength={6}
                className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 text-center text-2xl font-mono tracking-wider"
              />
            </div>

            <button
              onClick={handleJoinRoom}
              disabled={loading || roomCode.length !== 6}
              className="w-full px-6 py-3 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white rounded-lg font-medium transition-colors"
            >
              {loading ? 'Joining...' : 'Join Room'}
            </button>
          </div>
        )}

        {/* Your Rooms */}
        <div className="mt-8">
          <h2 className="text-xl font-semibold mb-4">Your Rooms</h2>
          
          {rooms.length === 0 ? (
            <p className="text-gray-400 text-center py-8">
              {activeTab === 'create' 
                ? 'Create your first room to get started!' 
                : 'No rooms available. Create a room or join one with a code.'}
            </p>
          ) : (
            <div className="grid gap-4 md:grid-cols-2">
              {rooms.map((room) => (
                <div key={room.id} className="bg-white/10 border border-white/20 rounded-lg p-4">
                  <h3 className="font-semibold text-lg mb-2">{room.name}</h3>
                  <p className="text-sm text-gray-300 mb-2">
                    Code: <span className="font-mono font-bold">{room.code}</span>
                  </p>
                  <p className="text-sm text-gray-400 mb-4">
                    Status: {room.status || 'Active'}
                  </p>
                  
                  <div className="flex gap-2">
                    <button
                      onClick={() => handleEnterRoom(room)}
                      className="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors"
                    >
                      Enter Room
                    </button>
                    {room.host_id === user.id && (
                      <button
                        onClick={() => handleDeleteRoom(room.id, room.name)}
                        className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium transition-colors"
                      >
                        Delete
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
